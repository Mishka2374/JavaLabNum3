package mishka.workingPlace;

/**
 * List представляет собой реализацию функционального интерфейса работы коллекций ArrayList и LinkedList
 *
 * @author Mishka2374
 */
    public interface List<T> {
    /**
     * Добавляет указанный элемент в конец этого списка
     *
     * @param element добавляемый элемент
     */
    void add(T element);

    /**
     * Вставляет указанный элемент в указанную позицию в этом списке
     *
     * @param index позиция
     *
     * @param x добавляемый элемент
     */
        void add( int index, T x);

    /**
     * Удаляет элемент в указанной позиции в этом списке
     *
     * @param index удаляемая позиция
     */
        void remove(int index);

    /**
     * Возвращает элемент в указанной позиции в этом списке
     *
     * @param index позиция элемента
     *
     * @return элемент списка по указанному индексу
     */
        T get(int index);

    /**
     * Заменяет элемент в указанной позиции в этом списке на указанный элемент
     *
     * @param index позиция элемента
     *
     * @param e     элемент для замены
     *
     * @return замена прошла успешно
     */
        boolean set(int index, T e);

    /**
     * Проверка на пустоту
     *
     * @return true - список пустой / false - список непустой
     */
        boolean isEmpty();

    /**
     * Возвращает количество элементов в этом списке
     *
     * @return размер списка
     */
        int size();

    /**
     * Удаляет все элементы из этого списка
     */
        void clear();

    /**
     * Проверяет, содержит ли список указанный элемент
     *
     * @param o указанный элемент
     *
     * @return true, если этот список содержит указанный элемент / false, если не содержит указанный элемент
     */
        boolean contains(T o);

    /**
     * Перегруженный метод toString класса Object
     *
     * @return возвращает строку с информацией об элементах списка
     */
        String toString();

    }

